package com.core.collection.list;

/**
 * <p> Queue|Deque - очередь/двунаправленная очередь.
 * <p> Queue расширяет Collection и объявляет поведение очередей, которые представляют собой список с дисциплиной "первый вошел, первый вышел" (FIFO).
 * Существуют разные типы очередей, в которых порядок основан на некотором критерии. Очереди не могут хранить значения null.
 * <p> Deque появился в Java 6. Он расширяет Queue и описывает поведение двунаправленной очереди.
 * Двунаправленная очередь может функционировать как стандартная очередь FIFO либо как стек LIFO.
 * <p>
 * <p> Методы интерфейса Queue:
 * <p> Е element() - возвращает элемент из головы очереди. Элемент не удаляется. Если очередь пуста, инициируется исключение NoSuchElementException.
 * <p> Е remove() - удаляет элемент из головы очереди, возвращая его. Инициирует исключение NoSuchElementException, если очередь пуста.
 * <p> Е peek() - возвращает элемент из головы очереди. Возвращает null, если очередь пуста. Элемент не удаляется.
 * <p> Е роll() - возвращает элемент из головы очереди и удаляет его. Возвращает null, если очередь пуста.
 * <p> boolean offer(Е оbj) - пытается добавить оbj в очередь. Возвращает true, если оbj добавлен, и false в противном случае.
 * <p>
 * <p>Методы интерфейса Deque:
 * <p> void addFirst(Е obj)  - добавляет obj в голову двунаправленной очереди. Возбуждает исключение IllegalStateException,
 *      если в очереди ограниченной емкости нет места.
 * <p> void addLast(Е obj) - добавляет obj в хвост двунаправленной очереди. Возбуждает исключение IllegalStateException,
 *      если в очереди ограниченной емкости нет места.
 * <p> Е getFirst() - возвращает первый элемент двунаправленной очереди. Объект из очереди не удаляется.
 *      В случае пустой двунаправленной очереди возбуждает исключение NoSuchElementException.
 * <p> Е getLast() - возвращает последний элемент двунаправленной очереди. Объект из очереди не удаляется.
 *      В случае пустой двунаправленной очереди возбуждает исключения NoSuchElementException.
 * <p> boolean offerFirst(Е obj) - пытается добавить obj в голову двунаправленной очереди. Возвращает true, если obj добавлен,
 *      и false в противном случае. Таким образом, этот метод возвращает false при попытке добавить obj в полную двунаправленную очередь ограниченной емкости.
 * <p> boolean offerLast(E obj) - пытается добавить obj в хвост двунаправленной очереди. Возвращает true, если obj добавлен,
 *      и false в против ном случае.
 * <p> Е рор() - возвращает элемент, находящийся в голове двунаправленной очереди, одновременно удаляя его из очереди.
 *      Возбуждает исключение NoSuchElementException, если очередь пуста.
 * <p> void push(Е obj) - добавляет элемент в голову двунаправленной очереди. Если в очереди фиксированного объема нет места,
 *      возбуждает исключение IllegalStateException.
 * <p> Е peekFirst() - возвращает элемент, находящийся в голове двунаправленной очереди. Возвращает null, если очередь пуста.
 *      Объект из очереди не удаляется.
 * <p> Е peekLast() - возвращает элемент, находящийся в хвосте двунаправленной очереди. Возвращает null, если очередь пуста.
 *      Объект из очереди не удаляется.
 * <p> Е pollFirst() - возвращает элемент, находящийся в голове двунаправленной очереди, одновременно удаляя его из очереди.
 *      Возвращает null, если очередь пуста.
 * <p> Е pollLast() - возвращает элемент, находящийся в хвосте двунаправленной очереди, одновременно удаляя его из очереди.
 *      Возвращает null, если очередь пуста.
 * <p> Е removeLast() - возвращает элемент, находящийся в конце двунаправленной очереди, удаляя его в процессе.
 *      Возбуждает исключение NoSuchElementException, если очередь пуста.
 * <p> Е removeFirst() - возвращает элемент, находящийся в голове двунаправленной очереди, одновременно удаляя его из очереди.
 *      Возбуждает исключение NoSuchElementException, если очередь пуста.
 * <p> boolean removeLastOccurrence(Object obj) - удаляет последнее вхождение obj из двунаправленной очереди.
 *      Возвращает true в случае успеха и false если очередь не содержала obj.
 * <p> boolean removeFirstOccurrence(Object obj) - удаляет первое вхождение obj из двунаправленной очереди.
 *      Возвращает true в случае успеха и false, если очередь не содержала obj.
 *
 * <p>
 */
public class QueueInfo {
}
